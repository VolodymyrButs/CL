{"version":3,"sources":["webpack:///./src/components/ButtonWithModal.tsx","webpack:///./src/components/PageMetaData.tsx","webpack:///./src/components/StarRating.tsx","webpack:///./src/blocks/Reviews.tsx","webpack:///./src/utils/getRandomArray.tsx","webpack:///./src/blocks/Works/WorksHero.tsx","webpack:///./src/blocks/Works/WorksProjectGrid.tsx","webpack:///./src/pages/works.tsx","webpack:///./src/blocks/Works/WorksProjectItem.tsx","webpack:///./src/blocks/Connection.tsx","webpack:///./src/components/SliderComponent.tsx"],"names":["SubTitle","styled","h3","colors","dark","displayWidth","tablet","Wrapper","div","desktop","TitleStyled","Title","ButtonStyled","Button","ButtonWithModal","modalTitle","modalDescription","buttonLabel","placeholder","submitLabel","tracking","useState","isModalOpen","setModalIsOpen","useFormHandler","handleSubmitStatus","handleFormSendStart","formSendStatus","isOpen","closeHandler","formName","buttonText","onFormSubmit","onFormSendStart","register","errors","ref","minLength","required","err","phone","message","maxHeight","email","onClick","languagesList","Object","keys","languages","HelmetFunc","data","i18n","useTranslation","langData","language","getPagePath","usePagePath","title","name","content","description","lang","map","key","rel","hrefLang","href","StarRating","rating","quantity","arr","Array","from","_","i","viewBox","width","height","fill","className","d","percent","Math","round","id","url","x1","y1","x2","y2","offset","stopColor","ReviewsWrapper","backgroundColors","contact","mobileAfterBorder","RankTextWrapper","Rank","p","accentText","RankStarWrapper","GoogleIcon","Google","TextWrapper","Text","a","BottomText","SliderStyled","SliderComponent","Review","HeroColumn","indent","heroColumnTablet","heroColumnDesktop","SlideWrapper","Reviews","arrows","useStaticQuery","commonData","allReviewsYaml","edges","find","elem","node","parent","reviewsQuantity","link","reviewsArr","reviewsYaml","getDataByLanguage","ourRank","quantity1","quantity2","sliderSettings","dots","infinite","speed","nextArrow","bottom","prevArrow","RandomList","randLength","min","max","randArray","rand","floor","random","includes","push","createRand","length","Container","columns","tabletColumns","target","sendEvent","eventCategory","background","author","dangerouslySetInnerHTML","__html","text","location","WorksHeroWrapper","project","headerBg","LeftSidebar","RightSidebar","white","h1","darkText","ProjectColumn","WorksHero","firstWork","allProjectsYaml","secondWork","allWorksYaml","subtitle","WorksProjectItem","image","previewImage","portrait","WorksGridWrapper","Ul","ul","Li","li","Div","ButtonContainer","ButtonWrapper","formPromo","WorksProjectGrid","t","visibleProjects","setVisibleProjects","orientationPosition","index","arrLength","allProjectGrid","slice","item","landscape","placement","pageMetadata","uk","ru","en","WorksPage","Layout","Connection","conversionType","Image","Img","HoverWrapper","LocalizedLink","ItemWrapper","LogoStyled","LogoIcon","ButtonS","Description","photo","getImageByImageName","allImageSharp","fluid","imgStyle","objectFit","alt","loading","aria-label","to","CommunicationWrapper","props","ContainerStyle","backgroundColor","children","CarouselWrapper","forwardRef","settings"],"mappings":"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","file":"component---src-pages-works-tsx-bff7ca4aa828993e252b.js","sourcesContent":["import React, { useState } from 'react'\nimport styled from 'styled-components'\n\nimport { colors } from 'styles/colors'\nimport { displayWidth } from 'styles/width'\nimport { Modal } from './Modal'\nimport { Form, IChildrenProps, FormTracking } from 'components/form/Form'\nimport { PhoneInput } from 'components/form/PhoneInput'\nimport { Title } from 'components/TitleComponent'\nimport { Button } from './Button'\nimport { EmailInput } from './form/EmailInput'\nimport { MessageInput } from './form/MessageInput'\nimport { useFormHandler } from 'hooks/useFormHandler'\n\nconst SubTitle = styled.h3`\n    display: block;\n    text-align: left;\n    font-weight: normal;\n    font-size: 16px;\n    line-height: 26px;\n    letter-spacing: 0.4px;\n    color: ${colors.dark};\n    margin: 16px 0;\n    text-align: center;\n    @media (min-width: ${displayWidth.tablet}) {\n        text-align: left;\n    }\n`\nconst Wrapper = styled.div`\n    display: flex;\n    width: 100%;\n    box-sizing: border-box;\n    align-items: center;\n    flex-direction: column;\n    justify-content: center;\n    overflow-y: auto;\n    @media (min-width: ${displayWidth.tablet}) {\n        align-items: flex-start;\n        justify-content: space-around;\n    }\n    @media (min-width: ${displayWidth.desktop}) {\n        padding: 15px 50px 0;\n    }\n`\nconst TitleStyled = styled(Title)`\n    margin: 20px 0;\n    @media (orientation: landscape) {\n        margin: 16px 0;\n    }\n`\nconst ButtonStyled = styled(Button)`\n    width: 264px;\n    margin: 20px auto;\n    @media (max-width: 330px) {\n        width: 250px;\n    }\n    @media (min-width: ${displayWidth.tablet}) {\n        min-width: 220px;\n        width: 230px;\n        margin: 30px 0;\n    }\n    @media (min-width: ${displayWidth.desktop}) {\n        width: 264px;\n    }\n`\nexport const ButtonWithModal = ({\n    modalTitle,\n    modalDescription,\n    buttonLabel,\n    placeholder,\n    submitLabel,\n    tracking,\n}: {\n    modalTitle: string\n    modalDescription: string\n    buttonLabel: string\n    placeholder: string\n    submitLabel: string\n    tracking: FormTracking\n}) => {\n    const [isModalOpen, setModalIsOpen] = useState(false)\n\n    // TODO: move to Form\n    const {\n        handleSubmitStatus,\n        handleFormSendStart,\n        formSendStatus,\n    } = useFormHandler()\n    return (\n        <>\n            <Modal\n                isOpen={isModalOpen}\n                closeHandler={() => setModalIsOpen(false)}\n            >\n                <Wrapper>\n                    <>\n                        <TitleStyled>{modalTitle}</TitleStyled>\n                        <SubTitle>{modalDescription}</SubTitle>\n                        <Form\n                            formName={'Callback Form'}\n                            buttonText={submitLabel}\n                            onFormSubmit={handleSubmitStatus}\n                            onFormSendStart={handleFormSendStart}\n                            formSendStatus={formSendStatus}\n                            closeHandler={setModalIsOpen}\n                            {...tracking}\n                        >\n                            {({ register, errors }: IChildrenProps) => (\n                                <div>\n                                    <PhoneInput\n                                        ref={register({\n                                            minLength: 18,\n                                            required: true,\n                                        })}\n                                        err={errors.phone}\n                                    />\n\n                                    <MessageInput\n                                        ref={register({\n                                            required: true,\n                                        })}\n                                        err={errors.message}\n                                        placeholder={placeholder}\n                                        maxHeight={'90px'}\n                                    />\n\n                                    <EmailInput\n                                        ref={register}\n                                        err={errors.email}\n                                    />\n                                </div>\n                            )}\n                        </Form>\n                    </>\n                </Wrapper>\n            </Modal>\n\n            <ButtonStyled\n                onClick={() => {\n                    setModalIsOpen(true)\n                }}\n            >\n                {buttonLabel}\n            </ButtonStyled>\n        </>\n    )\n}\n","import { usePagePath } from 'hooks/usePagePath'\nimport { languages } from 'i18n/languages'\nimport React from 'react'\nimport { Helmet } from 'react-helmet'\nimport { useTranslation } from 'react-i18next'\n\nconst languagesList = Object.keys(languages)\n\nexport const HelmetFunc = ({\n    data,\n}: {\n    data: {\n        [x: string]: {\n            title: string\n            description: string\n        }\n    }\n}) => {\n    const { i18n } = useTranslation()\n    const langData = data[i18n.language]\n    const { getPagePath } = usePagePath()\n    return (\n        <Helmet>\n            <title>{langData.title} - Clearline</title>\n            <meta name=\"description\" content={langData.description} />\n            <html lang={i18n.language} />\n            {languagesList.map((lang) => {\n                return (\n                    <link\n                        key={lang}\n                        rel=\"alternate\"\n                        hrefLang={lang}\n                        href={\n                            `https://clearline.com.ua/new${  getPagePath(lang)}`\n                        }\n                    />\n                )\n            })}\n        </Helmet>\n    )\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Wrapper = styled.div`\n    svg {\n        padding: 0 6px;\n    }\n`\n\ninterface IStarRatingProps {\n    rating: number\n    quantity: number\n}\n\nexport const StarRating: React.FC<IStarRatingProps> = ({\n    rating,\n    quantity,\n}) => {\n    const arr = Array.from(Array(quantity), (_, i) => i + 1)\n    return (\n        <Wrapper>\n            {arr.map((i) => {\n                if (i <= rating) {\n                    return (\n                        <svg\n                            key={i}\n                            viewBox=\"0 0 51 48\"\n                            width=\"18px\"\n                            height=\"18px\"\n                        >\n                            <path\n                                fill=\"#E24C1A\"\n                                className=\"widget\"\n                                d=\"m25,1 6,17h18l-14,11 5,17-15-10-15,10 5-17-14-11h18z\"\n                            ></path>\n                        </svg>\n                    )\n                } else if (i > rating && i - rating < 1) {\n                    const ratio = Math.round((1 - (i - rating)) * 100)\n                    const percent = `${ratio}%`\n                    const id = `widgetGrad${i}`\n                    const url = `url(#${id})`\n                    return (\n                        <svg\n                            key={i}\n                            viewBox=\"0 0 51 48\"\n                            width=\"18px\"\n                            height=\"18px\"\n                        >\n                            <defs>\n                                <linearGradient\n                                    id={id}\n                                    x1=\"0%\"\n                                    y1=\"0%\"\n                                    x2=\"100%\"\n                                    y2=\"0%\"\n                                >\n                                    <stop\n                                        offset=\"0%\"\n                                        stopColor=\"rgb(35, 31, 32)\"\n                                    ></stop>\n                                    <stop\n                                        offset={percent}\n                                        stopColor=\"rgb(35, 31, 32)\"\n                                    ></stop>\n                                    <stop\n                                        offset={percent}\n                                        stopColor=\"rgb(203, 211, 227)\"\n                                    ></stop>\n                                    <stop\n                                        offset=\"100%\"\n                                        stopColor=\"rgb(203, 211, 227)\"\n                                    ></stop>\n                                </linearGradient>\n                            </defs>\n                            <path\n                                fill={url}\n                                className=\"widget\"\n                                d=\"m25,1 6,17h18l-14,11 5,17-15-10-15,10 5-17-14-11h18z\"\n                            ></path>\n                        </svg>\n                    )\n                } else {\n                    return (\n                        <svg\n                            key={i}\n                            viewBox=\"0 0 51 48\"\n                            width=\"18px\"\n                            height=\"18px\"\n                        >\n                            <path\n                                fill=\"rgb(203, 211, 227)\"\n                                className=\"widget\"\n                                d=\"m25,1 6,17h18l-14,11 5,17-15-10-15,10 5-17-14-11h18z\"\n                            ></path>\n                        </svg>\n                    )\n                }\n            })}\n        </Wrapper>\n    )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useTranslation } from 'react-i18next'\nimport { useStaticQuery, graphql } from 'gatsby'\n\nimport { StarRating } from 'components/StarRating'\nimport { Container } from 'components/Container'\nimport { backgroundColors, colors } from 'styles/colors'\nimport { displayWidth } from 'styles/width'\nimport { mobileAfterBorder } from 'styles/mobileAfterBorder'\nimport { Title } from 'components/TitleComponent'\nimport { getDataByLanguage } from 'utils/getDataByLanguage'\nimport { SliderComponent } from 'components/SliderComponent'\nimport Google from 'assets/icons/google.svg'\nimport { createRand } from 'utils/getRandomArray'\nimport { indent } from 'styles/indent'\nimport { sendEvent } from 'tracking'\nimport { SlickNext, SlickPrevious } from 'components/SlickNavigation'\n\nconst ReviewsWrapper = styled.div`\n    display: flex;\n    justify-content: center;\n    width: 100%;\n    background-color: ${backgroundColors.contact};\n    position: relative;\n    border-bottom: 1px solid ${colors.dark};\n    ${mobileAfterBorder}\n`\nconst RankTextWrapper = styled.div`\n    display: flex;\n    justify-content: center;\n    color: ${colors.dark};\n    span {\n        font-style: normal;\n        font-weight: bold;\n        font-size: 24px;\n        line-height: 33px;\n        align-self: flex-end;\n        @media (min-width: ${displayWidth.tablet}) {\n            font-size: 20px;\n            line-height: 24px;\n        }\n        @media (min-width: ${displayWidth.desktop}) {\n            font-size: 24px;\n            line-height: 33px;\n        }\n    }\n`\nconst Rank = styled.p`\n    font-style: normal;\n    font-weight: bold;\n    font-size: 32px;\n    line-height: 38px;\n    margin-left: 5px;\n    color: ${colors.accentText};\n    @media (min-width: ${displayWidth.tablet}) {\n        font-size: 24px;\n        line-height: 28px;\n    }\n    @media (min-width: ${displayWidth.desktop}) {\n        font-size: 32px;\n        line-height: 38px;\n    }\n`\nconst RankStarWrapper = styled.div`\n    display: flex;\n    align-items: center;\n    margin: 14px auto;\n    @media (min-width: ${displayWidth.tablet}) {\n        margin: 14px 0;\n    }\n`\nconst GoogleIcon = styled(Google)`\n    margin-right: 18px;\n`\nconst TextWrapper = styled.div`\n    display: flex;\n    overflow: hidden;\n`\nconst Text = styled.div`\n    width: 100%;\n    overflow-y: auto;\n    p {\n        padding-top: 10px;\n        text-align: center;\n        font-style: normal;\n        font-weight: normal;\n        font-size: 16px;\n        line-height: 26px;\n        letter-spacing: 0.4px;\n        @media (min-width: ${displayWidth.tablet}) {\n            text-align: left;\n        }\n        strong {\n            font-weight: 700;\n        }\n    }\n`\n\nconst SubTitle = styled.a`\n    font-style: normal;\n    font-weight: normal;\n    font-size: 16px;\n    line-height: 26px;\n    letter-spacing: 0.4px;\n    text-decoration: underline;\n    text-underline-position: under;\n    color: ${colors.dark};\n    margin-bottom: 20px;\n`\nconst BottomText = styled.div`\n    font-style: normal;\n    font-size: 16px;\n    line-height: 26px;\n    letter-spacing: 0.4px;\n    color: ${colors.dark};\n    text-align: center;\n    font-weight: bold;\n    margin: 25px auto;\n    @media (min-width: ${displayWidth.tablet}) {\n        margin: 25px 0 0px;\n        text-align: left;\n    }\n`\nconst TitleStyled = styled(Title)`\n    @media (min-width: ${displayWidth.tablet}) {\n        margin-left: 0;\n    }\n`\nconst SliderStyled = styled(SliderComponent)`\n    background-color: ${backgroundColors.contact};\n`\nconst Review = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    padding: 8px;\n    box-sizing: border-box;\n    border: 1px solid ${colors.dark};\n    border-radius: 40px;\n    height: 430px;\n    @media (min-width: 500px) {\n        height: 330px;\n    }\n    @media (min-width: ${displayWidth.tablet}) {\n        height: 330px;\n        padding: 30px;\n        align-items: flex-start;\n        margin: 40px;\n    }\n    @media (min-width: ${displayWidth.desktop}) {\n        padding: 10px 50px;\n        height: 280px;\n    }\n    :focus {\n        outline: none;\n    }\n`\nconst HeroColumn = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: space-between;\n    border-bottom: 1px solid ${colors.dark};\n    @media (min-width: ${displayWidth.tablet}) {\n        padding: 0 10px 56px ${indent.heroColumnTablet};\n        align-items: flex-start;\n        border-bottom: none;\n        border-right: 1px solid ${colors.dark};\n    }\n    @media (min-width: ${displayWidth.desktop}) {\n        padding: 0 10px 26px ${indent.heroColumnDesktop};\n    }\n`\n\nconst SlideWrapper = styled.div``\n\nexport const Reviews = ({ arrows }: { arrows?: boolean; bottom?: boolean }) => {\n    const { i18n } = useTranslation()\n    const data = useStaticQuery(graphql`\n        query {\n            allReviewsYaml {\n                edges {\n                    node {\n                        title\n                        ourRank\n                        rating\n                        quantity1\n                        quantity2\n                        link\n                        reviewsQuantity\n                        reviewsArr {\n                            text\n                            name\n                            location\n                        }\n                        parent {\n                            ... on File {\n                                name\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    `)\n    const commonData = data.allReviewsYaml.edges.find(\n        (elem: { node: { parent: { name: string } } }) => {\n            return elem.node.parent.name === 'reviews'\n        }\n    ).node\n    const { rating, reviewsQuantity, link, reviewsArr } = commonData\n    const reviewsYaml = getDataByLanguage(data.allReviewsYaml, i18n.language)\n    const { title, ourRank, quantity1, quantity2 } = reviewsYaml\n    const arr = arrows ? true : false\n    const sliderSettings = {\n        dots: true,\n        infinite: true,\n        speed: 100,\n        arrows: arr,\n        nextArrow: <SlickNext bottom />,\n        prevArrow: <SlickPrevious bottom />,\n    }\n\n    const RandomList = createRand(5, 0, reviewsArr.length - 1)\n    return (\n        <ReviewsWrapper>\n            <Container columns={'1fr'} tabletColumns={'1fr 2fr'}>\n                <HeroColumn>\n                    <TitleStyled> {title}</TitleStyled>\n                    <RankTextWrapper>\n                        <span>{ourRank}: </span>\n                        <Rank>{rating}</Rank>\n                        <span>/5</span>\n                    </RankTextWrapper>\n                    <RankStarWrapper>\n                        <GoogleIcon />\n                        <StarRating rating={rating} quantity={5} />\n                    </RankStarWrapper>\n                    <SubTitle\n                        href={link}\n                        target=\"blank\"\n                        onClick={() => {\n                            sendEvent('Click', {\n                                eventCategory: 'GoogleRewiews',\n                            })\n                        }}\n                    >\n                        {quantity1}&nbsp;\n                        {reviewsQuantity}&nbsp;\n                        {quantity2}\n                    </SubTitle>\n                </HeroColumn>\n                <SliderStyled\n                    {...sliderSettings}\n                    background={backgroundColors.contact}\n                >\n                    {RandomList.map((i) => {\n                        return (\n                            <SlideWrapper\n                                key={i}\n                                onClick={() => {\n                                    sendEvent('Click', {\n                                        eventCategory: 'ReviewItem',\n                                        author: reviewsArr[i].name,\n                                    })\n                                }}\n                            >\n                                <Review>\n                                    <p />\n                                    <TextWrapper>\n                                        <Text\n                                            dangerouslySetInnerHTML={{\n                                                __html: reviewsArr[i].text,\n                                            }}\n                                        />\n                                    </TextWrapper>\n                                    <BottomText>\n                                        {reviewsArr[i].name},&nbsp;\n                                        {reviewsArr[i].location}\n                                    </BottomText>\n                                </Review>\n                            </SlideWrapper>\n                        )\n                    })}\n                </SliderStyled>\n            </Container>\n        </ReviewsWrapper>\n    )\n}\n","export const createRand = (\n    randLength: number,\n    min: number,\n    max: number\n): number[] => {\n    let randArray: number[] = []\n    let i = 0\n    if (randLength > max - min + 1) {\n        return []\n    }\n    while (i < randLength) {\n        let rand = Math.floor(Math.random() * (max - min + 1)) + min\n        if (!randArray.includes(rand)) {\n            i++\n            randArray.push(rand)\n        }\n    }\n    return randArray\n}\n","import React from 'react'\nimport { useTranslation } from 'react-i18next'\nimport styled from 'styled-components'\nimport { graphql, useStaticQuery } from 'gatsby'\n\nimport { displayWidth } from 'styles/width'\nimport { colors, backgroundColors } from 'styles/colors'\nimport { mobileAfterBorder } from 'styles/mobileAfterBorder'\nimport { Container } from 'components/Container'\nimport { headerBg } from 'styles/headerBg'\nimport { WorksProjectItem } from './WorksProjectItem'\n\nconst WorksHeroWrapper = styled.div`\n    display: flex;\n    justify-content: center;\n    width: 100%;\n    background-color: ${backgroundColors.project};\n    position: relative;\n    border-bottom: 1px solid ${colors.dark};\n\n    :before {\n        ${headerBg}\n    }\n    ${mobileAfterBorder}\n`\n\nconst LeftSidebar = styled.div`\n    display: none;\n    @media (min-width: ${displayWidth.tablet}) {\n        display: flex;\n        flex-grow: 1;\n        min-width: 80px;\n        background-color: ${backgroundColors.project};\n        box-sizing: border-box;\n    }\n`\nconst RightSidebar = styled(LeftSidebar)`\n    @media (min-width: ${displayWidth.tablet}) {\n        background-color: ${colors.white};\n    }\n`\nconst SubTitle = styled.div`\n    font-weight: normal;\n    font-size: 16px;\n    line-height: 26px;\n    text-align: center;\n    letter-spacing: 0.4px;\n    color: ${colors.dark};\n    margin: 16px;\n    p {\n        margin: 10px 0;\n    }\n    @media (min-width: ${displayWidth.tablet}) {\n        text-align: left;\n        margin: 0;\n        margin-bottom: 32px;\n    }\n`\nconst HeroColumn = styled.div`\n    padding: 0px 16px 33px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    @media (min-width: ${displayWidth.tablet}) {\n        padding: 60px 30px 60px 48px;\n        align-items: flex-start;\n    }\n`\n\nconst Title = styled.h1`\n    font-family: 'Yeseva One', sans-serif;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 48px;\n    line-height: 55px;\n    text-align: center;\n    letter-spacing: 2.37176px;\n    color: ${colors.darkText};\n    margin: 35px auto 0;\n    @media (min-width: ${displayWidth.tablet}) {\n        font-size: 34px;\n        line-height: 39px;\n        letter-spacing: 1.68px;\n        margin: 0;\n    }\n    @media (min-width: ${displayWidth.desktop}) {\n        font-size: 52px;\n        line-height: 60px;\n        letter-spacing: 2.68px;\n    }\n`\nconst ProjectColumn = styled.div`\n    width: 100%;\n    box-sizing: border-box;\n    background-color: ${colors.white};\n    z-index: 1;\n    outline: 1px solid ${colors.dark};\n    :hover {\n        background-color: ${backgroundColors.project};\n    }\n`\nexport const WorksHero = () => {\n    const { i18n } = useTranslation()\n    const data = useStaticQuery(graphql`\n        query {\n            allProjectsYaml(sort: { fields: name, order: ASC }) {\n                edges {\n                    node {\n                        name\n                        en {\n                            description\n                            name\n                        }\n                        previewImage {\n                            portrait\n                        }\n                        ru {\n                            description\n                            name\n                        }\n                        uk {\n                            description\n                            name\n                        }\n                        parent {\n                            ... on File {\n                                name\n                            }\n                        }\n                    }\n                }\n            }\n            allWorksYaml {\n                edges {\n                    node {\n                        en {\n                            subtitle\n                            title\n                        }\n                        ru {\n                            subtitle\n                            title\n                        }\n                        uk {\n                            subtitle\n                            title\n                        }\n                    }\n                }\n            }\n        }\n    `)\n\n    const firstWork = data.allProjectsYaml.edges[0].node\n    const secondWork = data.allProjectsYaml.edges[1].node\n\n    const { title, subtitle } = data.allWorksYaml.edges[0].node[i18n.language]\n    return (\n        <WorksHeroWrapper>\n            <LeftSidebar />\n            <Container columns={'1fr'} tabletColumns={'1fr  1fr 1fr'}>\n                <HeroColumn>\n                    <Title>{title}</Title>\n                    <SubTitle\n                        dangerouslySetInnerHTML={{\n                            __html: subtitle,\n                        }}\n                    />\n                </HeroColumn>\n                <ProjectColumn>\n                    <WorksProjectItem\n                        image={firstWork.previewImage.portrait}\n                        description={firstWork[i18n.language].name}\n                        link={firstWork.parent.name}\n                    />\n                </ProjectColumn>\n                <ProjectColumn>\n                    <WorksProjectItem\n                        image={secondWork.previewImage.portrait}\n                        description={secondWork[i18n.language].name}\n                        link={secondWork.parent.name}\n                    />\n                </ProjectColumn>\n            </Container>\n            <RightSidebar />\n        </WorksHeroWrapper>\n    )\n}\n","import React, { useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport styled from 'styled-components'\nimport { graphql, useStaticQuery } from 'gatsby'\n\nimport { displayWidth } from 'styles/width'\nimport { colors, backgroundColors } from 'styles/colors'\nimport { mobileAfterBorder } from 'styles/mobileAfterBorder'\nimport { headerBg } from 'styles/headerBg'\nimport { WorksProjectItem } from './WorksProjectItem'\nimport { Container } from 'components/Container'\nimport { Button } from 'components/Button'\nimport { sendEvent } from 'tracking'\n\nconst WorksGridWrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    width: 100%;\n    position: relative;\n    :before {\n        ${headerBg}\n    }\n    ${mobileAfterBorder}\n`\n\nconst Ul = styled.ul`\n    width: 100%;\n    margin: 0 auto;\n    display: grid;\n    grid-template-columns: 1fr;\n    grid-auto-rows: 140vw;\n    @media (min-width: ${displayWidth.tablet}) {\n        grid-template-columns: 1fr 1fr 1fr;\n        grid-auto-rows: 450px;\n        max-width: calc(100% - 160px);\n    }\n    @media (min-width: ${displayWidth.desktop}) {\n        grid-auto-rows: 550px;\n        max-width: 1190px;\n    }\n`\nconst Li = styled.li`\n    outline: 1px solid ${colors.dark};\n    list-style: none;\n    background-color: white;\n    color: white;\n    display: flex;\n    flex-flow: column;\n    justify-content: center;\n    align-items: center;\n    grid-column: span 1;\n    @media (min-width: ${displayWidth.tablet}) {\n        :nth-child(4n + 1) {\n            grid-column: span 2;\n        }\n        :nth-child(4n + 4) {\n            grid-column: span 2;\n        }\n    }\n    :hover {\n        background-color: ${backgroundColors.project};\n    }\n`\nconst Div = styled.div`\n    border-right: 1px solid ${colors.dark};\n`\nconst ButtonContainer = styled(Container)`\n    margin-top: 1px;\n`\nconst ButtonWrapper = styled.div`\n    display: flex;\n    justify-content: center;\n    @media (min-width: ${displayWidth.tablet}) {\n        justify-content: flex-start;\n    }\n`\nconst ButtonStyled = styled(Button)`\n    margin: 30px;\n    font-weight: 600;\n    background-color: ${backgroundColors.formPromo};\n    color: ${colors.dark};\n`\nexport const WorksProjectGrid = () => {\n    const { i18n, t } = useTranslation()\n    const [visibleProjects, setVisibleProjects] = useState(4)\n    const orientationPosition = (index: number, arrLength: number) => {\n        for (let i = 0; i < arrLength; i++) {\n            if (index + 1 === i * 4 + 1 || index + 1 === i * 4 + 4) {\n                return 0\n            }\n        }\n        return 1\n    }\n    const data = useStaticQuery(graphql`\n        query {\n            allProjectsYaml(sort: { fields: name, order: ASC }) {\n                edges {\n                    node {\n                        name\n                        en {\n                            description\n                            name\n                        }\n                        previewImage {\n                            landscape\n                            portrait\n                        }\n                        ru {\n                            description\n                            name\n                        }\n                        uk {\n                            description\n                            name\n                        }\n                        parent {\n                            ... on File {\n                                name\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    `)\n\n    const allProjectGrid = data.allProjectsYaml.edges.slice(2)\n    return (\n        <WorksGridWrapper>\n            <Ul>\n                {allProjectGrid.slice(0, visibleProjects).map(\n                    (\n                        item: {\n                            node: {\n                                [x: string]: {\n                                    name: string\n                                    landscape: string\n                                    portrait: string\n                                }\n                            }\n                        },\n                        index: number,\n                        arr: []\n                    ) => {\n                        return (\n                            <Li key={index}>\n                                <WorksProjectItem\n                                    image={\n                                        orientationPosition(\n                                            index,\n                                            arr.length\n                                        ) === 0\n                                            ? item.node.previewImage.landscape\n                                            : item.node.previewImage.portrait\n                                    }\n                                    description={\n                                        item.node[i18n.languages[0]].name\n                                    }\n                                    link={item.node.parent.name}\n                                />\n                            </Li>\n                        )\n                    }\n                )}\n            </Ul>\n            {allProjectGrid.length > visibleProjects && (\n                <ButtonContainer columns={'1fr'} tabletColumns={'1fr 2fr'}>\n                    <Div></Div>\n                    <ButtonWrapper>\n                        <ButtonStyled\n                            onClick={() => {\n                                setVisibleProjects(allProjectGrid.length),\n                                    sendEvent('Click', {\n                                        eventCategory: 'ShowMoreButton',\n                                        placement: 'Works',\n                                        target: 'ShowMore',\n                                    })\n                            }}\n                        >\n                            {t('showMore')}\n                        </ButtonStyled>\n                    </ButtonWrapper>\n                </ButtonContainer>\n            )}\n        </WorksGridWrapper>\n    )\n}\n","import React from 'react'\nimport { useTranslation } from 'react-i18next'\n\nimport { WorksHero } from 'blocks/Works/WorksHero'\nimport { Reviews } from 'blocks/Reviews'\nimport { Connection } from 'blocks/Connection'\nimport { ButtonWithModal } from 'components/ButtonWithModal'\nimport { WorksProjectGrid } from 'blocks/Works/WorksProjectGrid'\nimport { HelmetFunc } from 'components/PageMetaData'\nimport { Layout } from 'layout/Layout'\n\nconst pageMetadata = {\n    uk: {\n        title: 'Роботи студії дизайну інтер`єру ClearLine',\n        description: 'Роботи за дизайном інтер`єрів студій ClearLine',\n    },\n    ru: {\n        title: 'Работы студии дизайна интерьера ClearLine',\n        description: 'Работы по дизайну интерьеров студии  ClearLine',\n    },\n    en: {\n        title: 'ClearLine interior design studio works',\n        description: 'Works on interior design of the ClearLine studio',\n    },\n}\n\nconst WorksPage = () => {\n    const { t } = useTranslation()\n    return (\n        <Layout>\n            <HelmetFunc data={pageMetadata} />\n            <WorksHero />\n            <WorksProjectGrid />\n            <Reviews />\n            <Connection text={t('connection.needDesignProject')}>\n                <ButtonWithModal\n                    modalTitle={t('connection.modalTitle')}\n                    modalDescription={t('connection.modalDescription')}\n                    buttonLabel={t('connection.buttonLabel')}\n                    placeholder={t('connection.placeholder')}\n                    submitLabel={t('connection.submitLabel')}\n                    tracking={{\n                        conversionType: 'CallbackFromWorks',\n                        eventCategory: 'CallbackFromWorks',\n                    }}\n                />\n            </Connection>\n        </Layout>\n    )\n}\n\nexport default WorksPage\n","import React from 'react'\nimport styled from 'styled-components'\nimport Img, { FluidObject } from 'gatsby-image'\nimport { useTranslation } from 'react-i18next'\n\nimport { colors } from 'styles/colors'\nimport { displayWidth } from 'styles/width'\nimport LogoIcon from 'assets/icons/Logo.svg'\nimport { Button } from 'components/Button'\nimport { LocalizedLink } from 'i18n/LocalizedLink'\nimport { getImageByImageName } from 'utils/getImageByImageName'\nimport { graphql, useStaticQuery } from 'gatsby'\n\nconst Image = styled(Img)<{ fluid: FluidObject }>`\n    width: 100%;\n    height: 100%;\n`\nconst HoverWrapper = styled(LocalizedLink)`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: space-around;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    background-color: rgba(0, 0, 0, 0.7);\n    opacity: 0.8;\n    transition: opacity 0.4s;\n    text-decoration: none;\n    @media (min-width: ${displayWidth.tablet}) {\n        opacity: 0;\n    }\n`\nconst ItemWrapper = styled.div`\n    position: relative;\n    width: calc(100% - 60px);\n    height: calc(100% - 60px);\n    margin: 30px;\n    outline: 1px solid ${colors.dark};\n    flex: 1;\n    &:hover {\n        ${HoverWrapper} {\n            @media (min-width: ${displayWidth.tablet}) {\n                opacity: 0.8;\n            }\n        }\n    }\n`\nconst LogoStyled = styled(LogoIcon)`\n    fill: ${colors.white};\n`\nconst ButtonS = styled(Button)`\n    width: 262px;\n    background-color: transparent;\n    padding: 20px 20px;\n    border: 1px solid ${colors.white};\n    font-family: 'Open Sans', sans-serif;\n    font-style: normal;\n    font-weight: 600;\n    font-size: 16px;\n    line-height: 24px;\n    text-transform: uppercase;\n    text-align: center;\n`\nconst Description = styled.p`\n    color: ${colors.white};\n    margin: 0 16px;\n    text-align: center;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 18px;\n    line-height: 28px;\n    letter-spacing: 0.889412px;\n`\nexport interface WorksProjectItemProp {\n    image: string\n    description: string\n    link: string\n}\n\nexport const WorksProjectItem = ({\n    image,\n    description,\n    link,\n}: WorksProjectItemProp) => {\n    const data = useStaticQuery(graphql`\n        query {\n            allImageSharp {\n                edges {\n                    node {\n                        fluid(srcSetBreakpoints: [400]) {\n                            originalName\n                            ...GatsbyImageSharpFluid\n                        }\n                        parent {\n                            ... on File {\n                                name\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    `)\n    const { t } = useTranslation()\n    const photo = getImageByImageName(data.allImageSharp, image)\n\n    return (\n        <ItemWrapper>\n            <Image\n                fluid={photo.fluid}\n                imgStyle={{\n                    objectFit: 'containe',\n                }}\n                alt={photo.parent.name}\n                title={photo.parent.name}\n                loading=\"eager\"\n            />\n            <HoverWrapper aria-label={link} to={`works/${link}`}>\n                <LogoStyled />\n                <Description>{description}</Description>\n\n                <ButtonS>{t('showProject')}</ButtonS>\n            </HoverWrapper>\n        </ItemWrapper>\n    )\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { Container } from 'components/Container'\nimport { colors, backgroundColors } from 'styles/colors'\nimport { displayWidth } from 'styles/width'\nimport { mobileAfterBorder } from 'styles/mobileAfterBorder'\nimport { Title } from 'components/TitleComponent'\n\nconst CommunicationWrapper = styled.div<{ backgroundColors?: string }>`\n    display: flex;\n    justify-content: center;\n    width: 100%;\n    background-color: ${(props) =>\n        props.backgroundColors\n            ? props.backgroundColors\n            : backgroundColors.formPromo};\n    position: relative;\n    border-bottom: 1px solid ${colors.dark};\n    ${mobileAfterBorder}\n    z-index:12;\n`\n\nconst ContainerStyle = styled(Container)`\n    margin: 30px 0;\n    @media (min-width: ${displayWidth.tablet}) {\n        margin: 0;\n        outline: none;\n        display: flex;\n        justify-content: space-around;\n        align-items: center;\n    }\n    @media (min-width: ${displayWidth.tablet}) {\n        justify-content: space-between;\n    }\n`\nconst TitleStyled = styled(Title)`\n    margin: 20px 50px;\n`\ninterface IConnectionProps {\n    backgroundColor?: string\n    text: string\n    children: React.ReactElement\n}\n\nexport const Connection: React.FC<IConnectionProps> = ({\n    backgroundColor,\n    text,\n    children,\n}) => {\n    return (\n        <CommunicationWrapper backgroundColors={backgroundColor}>\n            <ContainerStyle columns={'1fr'} tabletColumns={'1fr'}>\n                <TitleStyled>{text}</TitleStyled>\n                {children}\n            </ContainerStyle>\n        </CommunicationWrapper>\n    )\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { displayWidth } from 'styles/width'\nimport Slider from 'react-slick'\nimport 'slick-carousel/slick/slick.css'\nimport 'slick-carousel/slick/slick-theme.css'\nimport { SlickNext, SlickPrevious } from 'components/SlickNavigation'\n\nconst CarouselWrapper = styled.div`\n    width: 100vw;\n    box-sizing: border-box;\n    overflow: hidden;\n    margin: 0;\n    height: auto;\n    padding: 16px 32px 26px;\n    @media (min-width: ${displayWidth.tablet}) {\n        max-width: calc((100vw - 160px) * 0.6666);\n        height: auto;\n        padding: 0;\n    }\n    @media (min-width: ${displayWidth.desktop}) {\n        max-width: calc((${displayWidth.desktop} - 160px) * 0.6666);\n        max-height: 600px;\n    }\n    .slick-list {\n        margin: 0 -16px;\n        @media (min-width: ${displayWidth.tablet}) {\n            margin: 0 -30px;\n        }\n    }\n    img {\n        cursor: grab;\n    }\n    .slick-slide > div {\n        margin: 0 16px;\n        @media (min-width: ${displayWidth.tablet}) {\n            margin: 0 30px;\n        }\n    }\n    .slick-dots {\n        bottom: -22px;\n        left: 0;\n\n        @media (min-width: ${displayWidth.tablet}) {\n            bottom: 5px;\n        }\n        li {\n            width: 10px;\n            button {\n                width: 10px;\n                ::before {\n                    width: 10px;\n                }\n            }\n        }\n    }\n`\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const SliderComponent = ({ children, forwardRef, ...props }: any) => {\n    const settings = {\n        nextArrow: <SlickNext />,\n        prevArrow: <SlickPrevious />,\n    }\n    return (\n        <CarouselWrapper {...props}>\n            <Slider {...settings} {...props} ref={forwardRef}>\n                {children}\n            </Slider>\n        </CarouselWrapper>\n    )\n}\n"],"sourceRoot":""}