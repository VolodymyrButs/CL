{"version":3,"sources":["webpack:///./src/blocks/DefaultFormBlock.tsx","webpack:///./src/components/PageMetaData.tsx","webpack:///./src/blocks/DefaultFormHero.tsx","webpack:///./src/blocks/Services/ServicesItem.tsx","webpack:///./src/blocks/Services/Services.tsx","webpack:///./src/styles/headerBg.ts","webpack:///./src/components/RunningLine.tsx"],"names":["FormWrapper","styled","div","backgroundColors","formPromo","mobileAfterBorder","displayWidth","tablet","colors","dark","InputBlock","desktop","FormTitle","FormColumn","$size","css","Wrap","span","DefaultFormBlock","withPhoneMobile","tracking","children","textTitle","t","useTranslation","useFormHandler","handleSubmitStatus","handleFormSendStart","formSendStatus","columns","tabletColumns","Boolean","buttonText","onFormSubmit","onFormSendStart","register","errors","ref","minLength","required","err","phone","message","email","languagesList","Object","keys","languages","HelmetFunc","data","i18n","langData","language","getPagePath","usePagePath","title","name","content","description","lang","map","key","rel","hrefLang","href","HeroColumn","TitleStyledMobile","Title","TitleStyledDesktop","indent","heroColumnTablet","heroColumnDesktop","Price","p","accentText","SubTitle","h3","PhoneLinkStyled","PhoneLink","Image","Img","DefaultFormHero","image","useStaticQuery","imageFluid","getImageByImageName","allImageSharp","formYaml","getDataByLanguage","allFormYaml","titleMobile","titleDesktop","price","contactInformation","primaryPhone","placement","fluid","loading","QuestionWrapper","$isAnswerVisible","white","Question","Answer","darkText","ArrowStyled","Arrow","IconStyled","Icon","ServicesItem","question","answer","icon","isAnswerVisible","setIsAnswerVisible","onClick","sendEvent","eventCategory","type","iconName","dangerouslySetInnerHTML","__html","ServicesWrapper","contact","headerBg","TitleStyled","TitleH1","mobile","ServicesListStyled","ChairImg","Services","allServicesYaml","questions","palmImage","useState","Container","imgStyle","objectFit","item","index","headerHeight","run","keyframes","run2","RunningTextContainer","$inverse","Wrapper","Text","Text2","RunningLine","inverse","runningLineContent","length","repeat"],"mappings":"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","file":"ea095323876cc76710994fd1d63b5fd9617fe75d-91c55b22acf66e67f90e.js","sourcesContent":["import React from 'react'\nimport { useTranslation } from 'react-i18next'\nimport styled, { css } from 'styled-components'\n\nimport { Form, IChildrenProps, FormTracking } from 'components/form/Form'\nimport { PhoneInput } from 'components/form/PhoneInput'\nimport { EmailInput } from 'components/form/EmailInput'\nimport { MessageInput } from 'components/form/MessageInput'\nimport { mobileAfterBorder } from 'styles/mobileAfterBorder'\nimport { colors, backgroundColors } from 'styles/colors'\nimport { displayWidth } from 'styles/width'\nimport { Container } from 'components/Container'\nimport { DefaultFormHero } from './DefaultFormHero'\nimport { useFormHandler } from 'hooks/useFormHandler'\n\nconst FormWrapper = styled.div`\n    display: flex;\n    justify-content: center;\n    position: relative;\n    background-color: ${backgroundColors.formPromo};\n    width: 100%;\n    ${mobileAfterBorder};\n    @media (min-width: ${displayWidth.tablet}) {\n        border-bottom: 1px solid ${colors.dark};\n    }\n`\n\nconst InputBlock = styled.div`\n    display: flex;\n    flex-direction: column;\n    @media (min-width: ${displayWidth.desktop}) {\n        width: calc(100% - 150px);\n        margin-right: 150px;\n    }\n`\nconst FormTitle = styled.div`\n    font-family: 'Yeseva One', sans-serif;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 24px;\n    line-height: 30px;\n    letter-spacing: 1px;\n    color: ${colors.dark};\n    text-align: center;\n    margin: 40px 0 24px;\n    @media (min-width: ${displayWidth.tablet}) {\n        font-size: 32px;\n        text-align: left;\n        margin: 56px 0 24px;\n    }\n`\n\nconst FormColumn = styled.div<{ $size: boolean }>`\n    width: 100%;\n    padding: ${({ $size }) => ($size === true ? '0' : '0 32px')};\n    display: flex;\n    flex-direction: column;\n    flex-shrink: 0;\n    box-sizing: border-box;\n    ${({ $size }) =>\n        $size === true\n            ? css`\n                  span {\n                      box-sizing: border-box;\n                      padding: 0 32px;\n                      width: 100%;\n                      @media (min-width: ${displayWidth.tablet}) {\n                          width: 50%;\n                      }\n                      div {\n                          @media (min-width: ${displayWidth.tablet}) {\n                              min-width: 200px;\n                          }\n                          form {\n                              div {\n                                  @media (min-width: ${displayWidth.tablet}) {\n                                      margin-right: 0px;\n                                      width: calc(100% - 50px);\n                                  }\n                              }\n                          }\n                      }\n                      span {\n                          padding: 0;\n                      }\n                  }\n                  > div {\n                      border-top: 1px solid #000;\n                      width: 100%;\n                      flex-shrink: 0;\n                      @media (min-width: ${displayWidth.tablet}) {\n                          width: 50%;\n                          border-top: none;\n                      }\n                  }\n              `\n            : ''}\n    @media (min-width: ${displayWidth.tablet}) {\n        flex-direction: row;\n    }\n`\nconst Wrap = styled.span`\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n`\nexport const DefaultFormBlock = ({\n    withPhoneMobile,\n    tracking,\n    children = null,\n    textTitle,\n}: {\n    withPhoneMobile?: boolean\n    tracking: FormTracking\n    children?: React.ReactNode\n    textTitle?: boolean\n}) => {\n    const { t } = useTranslation()\n\n    // TODO: move to Form\n    const {\n        handleSubmitStatus,\n        handleFormSendStart,\n        formSendStatus,\n    } = useFormHandler()\n\n    return (\n        <FormWrapper>\n            <Container columns={'1fr'} tabletColumns={'1fr 2fr'}>\n                <DefaultFormHero withPhoneMobile={withPhoneMobile} />\n                <FormColumn $size={Boolean(children)}>\n                    <Wrap>\n                        <FormTitle>\n                            {textTitle\n                                ? t('designQuestion')\n                                : t('defaultFormTitle')}\n                        </FormTitle>\n                        <Form\n                            buttonText={t('send')}\n                            onFormSubmit={handleSubmitStatus}\n                            formSendStatus={formSendStatus}\n                            onFormSendStart={handleFormSendStart}\n                            {...tracking}\n                        >\n                            {({ register, errors }: IChildrenProps) => (\n                                <InputBlock>\n                                    <PhoneInput\n                                        ref={register({\n                                            minLength: 18,\n                                            required: true,\n                                        })}\n                                        err={errors.phone}\n                                    />\n                                    <MessageInput\n                                        ref={register}\n                                        err={errors.message}\n                                    />\n                                    <EmailInput\n                                        ref={register}\n                                        err={errors.email}\n                                    />\n                                </InputBlock>\n                            )}\n                        </Form>\n                    </Wrap>\n                    {children}\n                </FormColumn>\n            </Container>\n        </FormWrapper>\n    )\n}\n","import { usePagePath } from 'hooks/usePagePath'\nimport { languages } from 'i18n/languages'\nimport React from 'react'\nimport { Helmet } from 'react-helmet'\nimport { useTranslation } from 'react-i18next'\n\nconst languagesList = Object.keys(languages)\n\nexport const HelmetFunc = ({\n    data,\n}: {\n    data: {\n        [x: string]: {\n            title: string\n            description: string\n        }\n    }\n}) => {\n    const { i18n } = useTranslation()\n    const langData = data[i18n.language]\n    const { getPagePath } = usePagePath()\n    return (\n        <Helmet>\n            <title>{langData.title} - Clearline</title>\n            <meta name=\"description\" content={langData.description} />\n            <html lang={i18n.language} />\n            {languagesList.map((lang) => {\n                return (\n                    <link\n                        key={lang}\n                        rel=\"alternate\"\n                        hrefLang={lang}\n                        href={\n                            `https://clearline.com.ua/new${  getPagePath(lang)}`\n                        }\n                    />\n                )\n            })}\n        </Helmet>\n    )\n}\n","import React from 'react'\nimport { useTranslation } from 'react-i18next'\nimport styled from 'styled-components'\nimport { useStaticQuery, graphql } from 'gatsby'\n\nimport Img, { FluidObject } from 'gatsby-image'\nimport { displayWidth } from 'styles/width'\nimport { PhoneLink } from 'components/PhoneLink'\nimport { colors } from 'styles/colors'\nimport { Title } from 'components/TitleComponent'\nimport { contactInformation } from 'components/contactInformation'\nimport { getDataByLanguage } from 'utils/getDataByLanguage'\nimport { indent } from 'styles/indent'\nimport { getImageByImageName } from 'utils/getImageByImageName'\n\nconst HeroColumn = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: space-between;\n    padding: 0 32px;\n    box-sizing: border-box;\n    border-bottom: 1px solid ${colors.dark};\n    width: 100%;\n    max-width: 100vw;\n    @media (min-width: ${displayWidth.tablet}) {\n        border-bottom: none;\n        padding: 0;\n        justify-content: space-between;\n        align-items: flex-start;\n        border-right: 1px solid ${colors.dark};\n    }\n`\n\nconst TitleStyledMobile = styled(Title)`\n    margin: 56px 0 30px;\n    font-size: 25px;\n    max-width: 100%;\n    @media (min-width: ${displayWidth.tablet}) {\n        display: none;\n        padding: 0 32px;\n    }\n`\nconst TitleStyledDesktop = styled(Title)`\n    display: none;\n    @media (min-width: ${displayWidth.tablet}) {\n        display: block;\n        margin-left: ${indent.heroColumnTablet};\n        text-align: left;\n    }\n    @media (min-width: ${displayWidth.desktop}) {\n        margin-left: ${indent.heroColumnDesktop};\n    }\n`\nconst Price = styled.p`\n    font-family: 'Yeseva One', sans-serif;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 64px;\n    line-height: 74px;\n    letter-spacing: 0.888889px;\n    color: ${colors.accentText};\n    margin: 0 10px;\n`\nconst SubTitle = styled.h3`\n    display: none;\n    @media (min-width: ${displayWidth.tablet}) {\n        display: block;\n        text-align: left;\n        font-weight: normal;\n        font-size: 16px;\n        line-height: 26px;\n        letter-spacing: 0.4px;\n        color: ${colors.dark};\n        margin-bottom: 32px;\n        padding: 0 ${indent.heroColumnTablet};\n    }\n    @media (min-width: ${displayWidth.desktop}) {\n        padding: 0 ${indent.heroColumnDesktop};\n    }\n`\n\nconst PhoneLinkStyled = styled(PhoneLink)<{ withPhoneMobile?: boolean }>`\n    flex-direction: column;\n    div {\n        margin-bottom: 24px;\n    }\n    margin-bottom: 50px;\n    align-self: center;\n    ${({ withPhoneMobile }) =>\n        withPhoneMobile ? 'display: flex;' : 'display: none;'}\n\n    @media (min-width: ${displayWidth.desktop}) {\n        flex-direction: row;\n        align-items: center;\n        margin: 0 20px 40px 0;\n        padding: 0 38px;\n        div {\n            width: 100px;\n            height: 100px;\n            margin-bottom: 0;\n        }\n        div > div > svg {\n            top: -50%;\n        }\n    }\n`\n\nconst Image = styled(Img)<{ fluid: FluidObject }>`\n    display: none;\n    @media (min-width: ${displayWidth.tablet}) {\n        display: block;\n        width: 90%;\n        height: auto;\n        align-self: center;\n        color: transparent;\n    }\n`\nexport const DefaultFormHero = ({\n    image,\n    withPhoneMobile,\n}: {\n    withPhoneMobile?: boolean\n    image?: boolean | undefined\n}) => {\n    const { i18n } = useTranslation()\n    const data = useStaticQuery(graphql`\n        query {\n            allImageSharp {\n                edges {\n                    node {\n                        fluid(srcSetBreakpoints: [400]) {\n                            originalName\n                            ...GatsbyImageSharpFluid\n                        }\n                    }\n                }\n            }\n            allFormYaml {\n                edges {\n                    node {\n                        titleMobile\n                        titleDesktop\n                        description\n                        price\n                        formTitle\n                        parent {\n                            ... on File {\n                                name\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    `)\n    const imageFluid = getImageByImageName(data.allImageSharp, 'fikus.webp')\n    const formYaml = getDataByLanguage(data.allFormYaml, i18n.language)\n    const { titleMobile, titleDesktop, description, price } = formYaml\n    return (\n        <HeroColumn>\n            <TitleStyledMobile>\n                {titleMobile}\n                <Price>{price}</Price>\n            </TitleStyledMobile>\n            <TitleStyledDesktop>{titleDesktop}</TitleStyledDesktop>\n            {!image && <SubTitle>{description}</SubTitle>}\n            <PhoneLinkStyled\n                phone={contactInformation.primaryPhone}\n                withPhoneMobile={withPhoneMobile}\n                placement={'Form'}\n            />\n            {image && <Image fluid={imageFluid.fluid} loading=\"eager\" />}\n        </HeroColumn>\n    )\n}\n","import React from 'react'\nimport styled, { css } from 'styled-components'\n\nimport Arrow from 'assets/icons/close.svg'\nimport { colors } from 'styles/colors'\nimport { displayWidth } from 'styles/width'\nimport { Icon } from 'components/Icon'\nimport { sendEvent } from 'tracking'\n\nconst QuestionWrapper = styled.div<{ $isAnswerVisible: boolean }>`\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding: 22px 16px 0;\n    cursor: pointer;\n    :before {\n        position: absolute;\n        content: '';\n        top: 0px;\n        left: 16px;\n        right: 16px;\n        z-index: 3;\n        border-top: 1px solid ${colors.dark};\n        border-bottom: none;\n        bottom: 100%;\n    }\n    ${({ $isAnswerVisible }) =>\n        $isAnswerVisible &&\n        css`\n            background-color: ${colors.dark};\n            :after {\n                pointer-events: none;\n                position: absolute;\n                top: 0;\n                bottom: 0px;\n                left: 15px;\n                right: 15px;\n                border-left: 1px solid ${colors.white};\n                border-right: 1px solid ${colors.white};\n                z-index: 3;\n                content: '';\n                @media (min-width: ${displayWidth.tablet}) {\n                    display: none;\n                }\n            }\n            :before {\n                border-top: none;\n            }\n        `}\n    @media (min-width: ${displayWidth.tablet}) {\n        margin: 0 32px;\n        padding: 0;\n        flex-direction: row;\n        justify-content: flex-start;\n        :before {\n            position: absolute;\n            content: '';\n            bottom: 0px;\n            left: 0;\n            right: 0;\n            z-index: 3;\n            border-bottom: 1px solid ${colors.dark};\n            border-top: none;\n            top: 100%;\n        }\n    }\n`\nconst Question = styled.div<{ $isAnswerVisible: boolean }>`\n    font-style: normal;\n    font-weight: normal;\n    font-size: 16px;\n    line-height: 22px;\n    color: ${({ $isAnswerVisible }) =>\n        $isAnswerVisible ? colors.white : colors.dark};\n    text-align: center;\n    @media (min-width: ${displayWidth.tablet}) {\n        width: 100%;\n        text-align: left;\n    }\n`\nconst Answer = styled.div<{ $isAnswerVisible: boolean }>`\n    display: ${({ $isAnswerVisible }) => ($isAnswerVisible ? 'block' : 'none')};\n    color: ${colors.darkText};\n    background-color: ${colors.white};\n    padding: 32px;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 16px;\n    line-height: 26px;\n    letter-spacing: 0.4px;\n    @media (min-width: ${displayWidth.tablet}) {\n        border: 1px solid ${colors.dark};\n        padding: 25px 70px;\n        margin: 0 32px;\n    }\n    strong {\n        font-weight: bold;\n    }\n    a {\n        color: ${colors.dark};\n    }\n    p,\n    li {\n        margin: 8px 0;\n    }\n    ol,\n    ul {\n        margin-left: 1em;\n    }\n    ol {\n        list-style: decimal;\n    }\n`\nconst ArrowStyled = styled(Arrow)<{ $isAnswerVisible: boolean }>`\n    margin: 16px 0px;\n    stroke: ${({ $isAnswerVisible }) => $isAnswerVisible && colors.white};\n    transform: ${({ $isAnswerVisible }) =>\n        !$isAnswerVisible && 'rotate(180deg)'};\n    cursor: pointer;\n    @media (min-width: ${displayWidth.tablet}) {\n        margin: 16px 10px;\n    }\n`\nconst IconStyled = styled(Icon)<{ $isAnswerVisible: boolean }>`\n    width: 57px;\n    height: 57px;\n    stroke: ${({ $isAnswerVisible }) => $isAnswerVisible && colors.white};\n    @media (min-width: ${displayWidth.tablet}) {\n        margin: 0 15px 0 0;\n    }\n`\nexport interface ServicesItemProp {\n    question: string\n    answer: string\n    icon: string\n    name: number\n    isAnswerVisible: number\n    setIsAnswerVisible: (arg: number) => void\n}\nexport const ServicesItem = ({\n    question,\n    answer,\n    icon,\n    name,\n    isAnswerVisible,\n    setIsAnswerVisible,\n}: ServicesItemProp) => {\n    return (\n        <>\n            <QuestionWrapper\n                $isAnswerVisible={isAnswerVisible === name}\n                onClick={() => {\n                    isAnswerVisible === name\n                        ? setIsAnswerVisible(-1)\n                        : setIsAnswerVisible(name)\n                    sendEvent('Click', {\n                        eventCategory: 'ServicesItem',\n                        type: question,\n                    })\n                }}\n            >\n                <IconStyled\n                    $isAnswerVisible={isAnswerVisible === name}\n                    iconName={icon}\n                />\n                <Question\n                    $isAnswerVisible={isAnswerVisible === name}\n                    dangerouslySetInnerHTML={{\n                        __html: question,\n                    }}\n                />\n                <ArrowStyled $isAnswerVisible={isAnswerVisible === name} />\n            </QuestionWrapper>\n            <Answer\n                $isAnswerVisible={isAnswerVisible === name}\n                dangerouslySetInnerHTML={{\n                    __html: answer,\n                }}\n            />\n        </>\n    )\n}\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { useTranslation } from 'react-i18next'\nimport { useStaticQuery, graphql } from 'gatsby'\nimport Img, { FluidObject } from 'gatsby-image'\n\nimport { Icon } from 'components/Icon'\nimport { Container } from 'components/Container'\nimport { backgroundColors, colors } from 'styles/colors'\nimport { displayWidth } from 'styles/width'\nimport { mobileAfterBorder } from 'styles/mobileAfterBorder'\nimport { TitleH1 } from 'components/TitleComponent'\nimport { getDataByLanguage } from 'utils/getDataByLanguage'\nimport { ServicesItem, ServicesItemProp } from 'blocks/Services/ServicesItem'\nimport { headerBg } from 'styles/headerBg'\nimport { getImageByImageName } from 'utils/getImageByImageName'\nimport { indent } from 'styles/indent'\n\nconst ServicesWrapper = styled.div`\n    display: flex;\n    justify-content: center;\n    width: 100%;\n    background-color: ${backgroundColors.contact};\n    position: relative;\n    border-bottom: 1px solid ${colors.dark};\n    ${mobileAfterBorder};\n    :before {\n        ${headerBg}\n    }\n    @media (min-width: ${displayWidth.desktop}) {\n        border-bottom: none;\n    }\n`\nconst TitleStyled = styled(TitleH1)`\n    margin: 40px 0 32px;\n    font-size: 48px;\n    line-height: 55px;\n    @media (min-width: ${displayWidth.tablet}) {\n        margin-left: ${indent.heroColumnTablet};\n    }\n    @media (min-width: ${displayWidth.desktop}) {\n        margin: 60px 10px 20px 49px;\n    }\n`\nconst HeroColumn = styled.div`\n    display: flex;\n    position: relative;\n    flex-direction: column;\n    align-items: center;\n    justify-content: space-between;\n    :after {\n        position: absolute;\n        content: '';\n        pointer-events: none;\n        bottom: 0;\n        left: ${indent.mobile};\n        right: ${indent.mobile};\n        z-index: 3;\n    }\n    @media (min-width: ${displayWidth.tablet}) {\n        align-items: flex-start;\n        border-bottom: none;\n        border-right: 1px solid ${colors.dark};\n        :after {\n            display: none;\n        }\n    }\n`\nconst ServicesListStyled = styled.div`\n    display: flex;\n    flex-direction: column;\n    @media (min-width: ${displayWidth.tablet}) {\n        margin: 56px 40px;\n    }\n`\nconst Image = styled(Img)<{ fluid: FluidObject }>`\n    display: none;\n    @media (min-width: ${displayWidth.tablet}) {\n        width: 65%;\n        height: auto;\n        max-height: 500px;\n        color: transparent;\n        display: block;\n        z-index: 2;\n    }\n`\nconst ChairImg = styled(Icon)`\n    display: none;\n    @media (min-width: ${displayWidth.tablet}) {\n        display: inline;\n        width: 60%;\n        position: absolute;\n        bottom: -30px;\n        right: 0px;\n    }\n`\n\nexport const Services = () => {\n    const { i18n } = useTranslation()\n    const data = useStaticQuery(graphql`\n        query {\n            allImageSharp {\n                edges {\n                    node {\n                        fluid(srcSetBreakpoints: [400]) {\n                            originalName\n                            ...GatsbyImageSharpFluid\n                        }\n                    }\n                }\n            }\n            allServicesYaml {\n                edges {\n                    node {\n                        title\n                        image\n                        questions {\n                            question\n                            answer\n                            icon\n                        }\n                        parent {\n                            ... on File {\n                                name\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    `)\n\n    const { image, title, questions } = getDataByLanguage(\n        data.allServicesYaml,\n        i18n.language\n    )\n    const palmImage = getImageByImageName(data.allImageSharp, image)\n    const [isAnswerVisible, setIsAnswerVisible] = useState(-1)\n    return (\n        <ServicesWrapper>\n            <Container columns={'1fr'} tabletColumns={'1fr 2fr'}>\n                <HeroColumn>\n                    <TitleStyled>{title}</TitleStyled>\n                    <Image\n                        fluid={palmImage.fluid}\n                        imgStyle={{\n                            objectFit: 'containe',\n                        }}\n                        loading=\"eager\"\n                    />\n                    <ChairImg iconName=\"chairServices.svg\" />\n                </HeroColumn>\n                <ServicesListStyled>\n                    {questions.map((item: ServicesItemProp, index: number) => {\n                        return (\n                            <ServicesItem\n                                setIsAnswerVisible={setIsAnswerVisible}\n                                isAnswerVisible={isAnswerVisible}\n                                key={index}\n                                name={index}\n                                question={item.question}\n                                answer={item.answer}\n                                icon={item.icon}\n                            />\n                        )\n                    })}\n                </ServicesListStyled>\n            </Container>\n        </ServicesWrapper>\n    )\n}\n","import { css } from 'styled-components'\nimport { headerHeight } from 'styles/height'\nimport { displayWidth } from 'styles/width'\n\nexport const headerBg = css`\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    z-index: -1;\n    height: ${headerHeight.mobile};\n    background-color: inherit;\n    content: '';\n    @media (min-width: ${displayWidth.tablet}) {\n        height: ${headerHeight.desktop};\n    }\n`\n","import React from 'react'\nimport styled, { keyframes } from 'styled-components'\n\nimport { colors } from 'styles/colors'\nimport { displayWidth } from 'styles/width'\n\nconst run = keyframes`\n0% {\n    transform:translateX(100%)\n}\n100% {\n    transform:translateX(-100%)\n}\n`\nconst run2 = keyframes`\n0% {\n    transform:translateX(0)\n}\n100% {\n    transform:translateX(-200%)\n}\n`\nconst RunningTextContainer = styled.div<{ $inverse: boolean | undefined }>`\n    width: 100%;\n    height: 50px;\n    background-color: ${({ $inverse }) =>\n        $inverse === true ? colors.dark : colors.white};\n    color: ${({ $inverse }) =>\n        $inverse === true ? colors.white : colors.dark};\n    border-bottom: 1px solid ${colors.dark};\n    @media (min-width: ${displayWidth.tablet}) {\n        background-color: ${({ $inverse }) =>\n            $inverse === true ? colors.white : colors.dark};\n        color: ${({ $inverse }) =>\n            $inverse === true ? colors.dark : colors.white};\n    }\n    overflow: hidden;\n    position: relative;\n`\nconst Wrapper = styled.div`\n    height: 100%;\n    display: flex;\n`\nconst Text = styled.p`\n    align-self: center;\n    color: inherit;\n    font-size: 16px;\n    line-height: 20px;\n    white-space: nowrap;\n    text-transform: uppercase;\n    animation: ${run} 240s linear infinite;\n    animation-delay: -120s;\n    @media (min-width: ${displayWidth.tablet}) {\n        animation: ${run} 120s linear infinite;\n        animation-delay: -60s;\n    }\n`\nconst Text2 = styled(Text)`\n    animation: ${run2} 240s linear infinite;\n    animation-delay: -240s;\n    @media (min-width: ${displayWidth.tablet}) {\n        animation: ${run2} 120s linear infinite;\n        animation-delay: -120s;\n    }\n`\nexport const RunningLine = ({\n    children,\n    inverse,\n}: {\n    children: string\n    inverse?: boolean\n}) => {\n    const runningLineContent =\n        children.length < 10 ? children.repeat(100) : children.repeat(20)\n    return (\n        <RunningTextContainer $inverse={inverse}>\n            <Wrapper>\n                <Text>{runningLineContent}</Text>\n                <Text2>{runningLineContent}</Text2>\n            </Wrapper>\n        </RunningTextContainer>\n    )\n}\n"],"sourceRoot":""}