{"version":3,"sources":["webpack:///./src/components/ButtonWithModal.tsx","webpack:///./src/blocks/Works/WorksProjectItem.tsx","webpack:///./src/blocks/Connection.tsx","webpack:///./src/styles/headerBg.ts","webpack:///./src/components/LastProjects.tsx","webpack:///./src/layout/Project.tsx","webpack:///./src/components/ModalCarousel.tsx"],"names":["SubTitle","styled","h3","colors","dark","displayWidth","tablet","Wrapper","div","desktop","TitleStyled","Title","ButtonStyled","Button","ButtonWithModal","modalTitle","modalDescription","buttonLabel","placeholder","submitLabel","tracking","useState","isModalOpen","setModalIsOpen","useFormHandler","handleSubmitStatus","handleFormSendStart","formSendStatus","isOpen","closeHandler","formName","buttonText","onFormSubmit","onFormSendStart","register","errors","ref","minLength","required","err","phone","message","maxHeight","email","onClick","Image","Img","HoverWrapper","LocalizedLink","ItemWrapper","LogoStyled","LogoIcon","white","ButtonS","Description","p","WorksProjectItem","image","description","link","data","useStaticQuery","t","useTranslation","photo","getImageByImageName","allImageSharp","fluid","imgStyle","objectFit","alt","parent","name","title","loading","aria-label","to","CommunicationWrapper","props","backgroundColors","formPromo","mobileAfterBorder","ContainerStyle","Container","Connection","backgroundColor","text","children","columns","tabletColumns","headerBg","css","headerHeight","mobile","LastProjectsWrapper","LastProjectsTopWrapper","LeftSidebar","RightSidebar","project","ProjectColumn","ColorBlock","TitleBlock","LastProjects","i18n","firstWork","edges","node","secondWork","previewImage","landscape","language","portrait","ProjectWrapper","HeroColumn","h2","darkText","height","CarouselWrapper","CarouselWrapperMini","ImageBig","ImageSmall","Breadcrumbs","PhotoWrapper","Counter","FullScreenButton","FullScreen","sliderSettings","infinite","nextArrow","prevArrow","responsive","breakpoint","settings","arrows","sliderSettingsBottom","slidesToShow","focusOnSelect","query","ProjectLayout","nav1","setNav1","nav2","setNav2","slider1","useRef","slider2","useEffect","current","allProjectsYaml","projectImages","allFile","map","imageIndex","setImageIndex","Layout","Helmet","content","dangerouslySetInnerHTML","__html","sendEvent","eventCategory","type","length","asNavFor","afterChange","currentSlide","component","key","childImageSharp","src","ModalCarousel","initialSlideIndex","lastProject","conversionType","ImageModal","SliderStyled","Slider","modal","slides","sliderRef","slider","slickGoTo"],"mappings":"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","file":"component---src-layout-project-tsx-b825362b00ae94364f3e.js","sourcesContent":["import React, { useState } from 'react'\nimport styled from 'styled-components'\n\nimport { colors } from 'styles/colors'\nimport { displayWidth } from 'styles/width'\nimport { Modal } from './Modal'\nimport { Form, IChildrenProps, FormTracking } from 'components/form/Form'\nimport { PhoneInput } from 'components/form/PhoneInput'\nimport { Title } from 'components/TitleComponent'\nimport { Button } from './Button'\nimport { EmailInput } from './form/EmailInput'\nimport { MessageInput } from './form/MessageInput'\nimport { useFormHandler } from 'hooks/useFormHandler'\n\nconst SubTitle = styled.h3`\n    display: block;\n    text-align: left;\n    font-weight: normal;\n    font-size: 16px;\n    line-height: 26px;\n    letter-spacing: 0.4px;\n    color: ${colors.dark};\n    margin: 16px 0;\n    text-align: center;\n    @media (min-width: ${displayWidth.tablet}) {\n        text-align: left;\n    }\n`\nconst Wrapper = styled.div`\n    display: flex;\n    width: 100%;\n    box-sizing: border-box;\n    align-items: center;\n    flex-direction: column;\n    justify-content: center;\n    overflow-y: auto;\n    @media (min-width: ${displayWidth.tablet}) {\n        align-items: flex-start;\n        justify-content: space-around;\n    }\n    @media (min-width: ${displayWidth.desktop}) {\n        padding: 15px 50px 0;\n    }\n`\nconst TitleStyled = styled(Title)`\n    margin: 20px 0;\n    @media (orientation: landscape) {\n        margin: 16px 0;\n    }\n`\nconst ButtonStyled = styled(Button)`\n    width: 264px;\n    margin: 20px auto;\n    @media (max-width: 330px) {\n        width: 250px;\n    }\n    @media (min-width: ${displayWidth.tablet}) {\n        min-width: 220px;\n        width: 230px;\n        margin: 30px 0;\n    }\n    @media (min-width: ${displayWidth.desktop}) {\n        width: 264px;\n    }\n`\nexport const ButtonWithModal = ({\n    modalTitle,\n    modalDescription,\n    buttonLabel,\n    placeholder,\n    submitLabel,\n    tracking,\n}: {\n    modalTitle: string\n    modalDescription: string\n    buttonLabel: string\n    placeholder: string\n    submitLabel: string\n    tracking: FormTracking\n}) => {\n    const [isModalOpen, setModalIsOpen] = useState(false)\n\n    // TODO: move to Form\n    const {\n        handleSubmitStatus,\n        handleFormSendStart,\n        formSendStatus,\n    } = useFormHandler()\n    return (\n        <>\n            <Modal\n                isOpen={isModalOpen}\n                closeHandler={() => setModalIsOpen(false)}\n            >\n                <Wrapper>\n                    <>\n                        <TitleStyled>{modalTitle}</TitleStyled>\n                        <SubTitle>{modalDescription}</SubTitle>\n                        <Form\n                            formName={'Callback Form'}\n                            buttonText={submitLabel}\n                            onFormSubmit={handleSubmitStatus}\n                            onFormSendStart={handleFormSendStart}\n                            formSendStatus={formSendStatus}\n                            closeHandler={setModalIsOpen}\n                            {...tracking}\n                        >\n                            {({ register, errors }: IChildrenProps) => (\n                                <div>\n                                    <PhoneInput\n                                        ref={register({\n                                            minLength: 18,\n                                            required: true,\n                                        })}\n                                        err={errors.phone}\n                                    />\n\n                                    <MessageInput\n                                        ref={register({\n                                            required: true,\n                                        })}\n                                        err={errors.message}\n                                        placeholder={placeholder}\n                                        maxHeight={'90px'}\n                                    />\n\n                                    <EmailInput\n                                        ref={register}\n                                        err={errors.email}\n                                    />\n                                </div>\n                            )}\n                        </Form>\n                    </>\n                </Wrapper>\n            </Modal>\n\n            <ButtonStyled\n                onClick={() => {\n                    setModalIsOpen(true)\n                }}\n            >\n                {buttonLabel}\n            </ButtonStyled>\n        </>\n    )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport Img, { FluidObject } from 'gatsby-image'\nimport { useTranslation } from 'react-i18next'\n\nimport { colors } from 'styles/colors'\nimport { displayWidth } from 'styles/width'\nimport LogoIcon from 'assets/icons/Logo.svg'\nimport { Button } from 'components/Button'\nimport { LocalizedLink } from 'i18n/LocalizedLink'\nimport { getImageByImageName } from 'utils/getImageByImageName'\nimport { graphql, useStaticQuery } from 'gatsby'\n\nconst Image = styled(Img)<{ fluid: FluidObject }>`\n    width: 100%;\n    height: 100%;\n`\nconst HoverWrapper = styled(LocalizedLink)`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: space-around;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    background-color: rgba(0, 0, 0, 0.7);\n    opacity: 0.8;\n    transition: opacity 0.4s;\n    text-decoration: none;\n    @media (min-width: ${displayWidth.tablet}) {\n        opacity: 0;\n    }\n`\nconst ItemWrapper = styled.div`\n    position: relative;\n    width: calc(100% - 60px);\n    height: calc(100% - 60px);\n    margin: 30px;\n    outline: 1px solid ${colors.dark};\n    flex: 1;\n    &:hover {\n        ${HoverWrapper} {\n            @media (min-width: ${displayWidth.tablet}) {\n                opacity: 0.8;\n            }\n        }\n    }\n`\nconst LogoStyled = styled(LogoIcon)`\n    fill: ${colors.white};\n`\nconst ButtonS = styled(Button)`\n    width: 262px;\n    background-color: transparent;\n    padding: 20px 20px;\n    border: 1px solid ${colors.white};\n    font-family: 'Open Sans', sans-serif;\n    font-style: normal;\n    font-weight: 600;\n    font-size: 16px;\n    line-height: 24px;\n    text-transform: uppercase;\n    text-align: center;\n`\nconst Description = styled.p`\n    color: ${colors.white};\n    margin: 0 16px;\n    text-align: center;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 18px;\n    line-height: 28px;\n    letter-spacing: 0.889412px;\n`\nexport interface WorksProjectItemProp {\n    image: string\n    description: string\n    link: string\n}\n\nexport const WorksProjectItem = ({\n    image,\n    description,\n    link,\n}: WorksProjectItemProp) => {\n    const data = useStaticQuery(graphql`\n        query {\n            allImageSharp {\n                edges {\n                    node {\n                        fluid(srcSetBreakpoints: [400]) {\n                            originalName\n                            ...GatsbyImageSharpFluid\n                        }\n                        parent {\n                            ... on File {\n                                name\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    `)\n    const { t } = useTranslation()\n    const photo = getImageByImageName(data.allImageSharp, image)\n\n    return (\n        <ItemWrapper>\n            <Image\n                fluid={photo.fluid}\n                imgStyle={{\n                    objectFit: 'containe',\n                }}\n                alt={photo.parent.name}\n                title={photo.parent.name}\n                loading=\"eager\"\n            />\n            <HoverWrapper aria-label={link} to={`works/${link}`}>\n                <LogoStyled />\n                <Description>{description}</Description>\n\n                <ButtonS>{t('showProject')}</ButtonS>\n            </HoverWrapper>\n        </ItemWrapper>\n    )\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { Container } from 'components/Container'\nimport { colors, backgroundColors } from 'styles/colors'\nimport { displayWidth } from 'styles/width'\nimport { mobileAfterBorder } from 'styles/mobileAfterBorder'\nimport { Title } from 'components/TitleComponent'\n\nconst CommunicationWrapper = styled.div<{ backgroundColors?: string }>`\n    display: flex;\n    justify-content: center;\n    width: 100%;\n    background-color: ${(props) =>\n        props.backgroundColors\n            ? props.backgroundColors\n            : backgroundColors.formPromo};\n    position: relative;\n    border-bottom: 1px solid ${colors.dark};\n    ${mobileAfterBorder}\n    z-index:12;\n`\n\nconst ContainerStyle = styled(Container)`\n    margin: 30px 0;\n    @media (min-width: ${displayWidth.tablet}) {\n        margin: 0;\n        outline: none;\n        display: flex;\n        justify-content: space-around;\n        align-items: center;\n    }\n    @media (min-width: ${displayWidth.tablet}) {\n        justify-content: space-between;\n    }\n`\nconst TitleStyled = styled(Title)`\n    margin: 20px 50px;\n`\ninterface IConnectionProps {\n    backgroundColor?: string\n    text: string\n    children: React.ReactElement\n}\n\nexport const Connection: React.FC<IConnectionProps> = ({\n    backgroundColor,\n    text,\n    children,\n}) => {\n    return (\n        <CommunicationWrapper backgroundColors={backgroundColor}>\n            <ContainerStyle columns={'1fr'} tabletColumns={'1fr'}>\n                <TitleStyled>{text}</TitleStyled>\n                {children}\n            </ContainerStyle>\n        </CommunicationWrapper>\n    )\n}\n","import { css } from 'styled-components'\nimport { headerHeight } from 'styles/height'\nimport { displayWidth } from 'styles/width'\n\nexport const headerBg = css`\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    z-index: -1;\n    height: ${headerHeight.mobile};\n    background-color: inherit;\n    content: '';\n    @media (min-width: ${displayWidth.tablet}) {\n        height: ${headerHeight.desktop};\n    }\n`\n","import React from 'react'\nimport { Container } from 'components/Container'\nimport { WorksProjectItem } from 'blocks/Works/WorksProjectItem'\nimport styled from 'styled-components'\nimport { backgroundColors, colors } from 'styles/colors'\nimport { displayWidth } from 'styles/width'\nimport { mobileAfterBorder } from 'styles/mobileAfterBorder'\nimport { useTranslation } from 'react-i18next'\nimport { ProjectData } from '../layout/Project'\n\nconst LastProjectsWrapper = styled.div`\n    display: flex;\n    justify-content: center;\n    width: 100%;\n    position: relative;\n    border-top: 1px solid ${colors.dark};\n    border-bottom: 1px solid ${colors.dark};\n    ${mobileAfterBorder}\n`\nconst LastProjectsTopWrapper = styled(LastProjectsWrapper)`\n    border-bottom: none;\n`\nconst LeftSidebar = styled.div`\n    display: none;\n    @media (min-width: ${displayWidth.tablet}) {\n        display: flex;\n        flex-grow: 1;\n        min-width: 79px;\n        background-color: ${colors.white};\n        box-sizing: border-box;\n        margin-left: 1px;\n    }\n`\nconst RightSidebar = styled(LeftSidebar)`\n    @media (min-width: ${displayWidth.tablet}) {\n        background-color: ${backgroundColors.project};\n    }\n`\nconst ProjectColumn = styled.div`\n    height: 500px;\n    background-color: ${colors.white};\n    :last-child {\n        background-color: ${colors.white};\n        outline: 1px solid ${colors.dark};\n    }\n    :hover {\n        background-color: ${backgroundColors.project};\n    }\n`\nconst ColorBlock = styled.div`\n    background-color: ${backgroundColors.project};\n    outline: 1px solid ${colors.dark};\n`\nconst TitleBlock = styled.div`\n    font-family: 'Yeseva One', sans-serif;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 32px;\n    line-height: 37px;\n    text-align: center;\n    letter-spacing: 1.58118px;\n    padding: 48px 40px;\n    text-align: left;\n    background-color: ${colors.white};\n    outline: 1px solid ${colors.dark};\n`\nexport const LastProjects = ({\n    data,\n}: {\n    data: {\n        edges: {\n            node: ProjectData\n        }[]\n    }\n}) => {\n    const { t, i18n } = useTranslation()\n    const firstWork = data.edges[0].node\n    const secondWork = data.edges[1].node\n    return (\n        <>\n            <LastProjectsTopWrapper>\n                <LeftSidebar />\n                <Container columns={'1fr'} tabletColumns={'2fr 1fr'}>\n                    <TitleBlock>{t('lastProjects')}</TitleBlock>\n                    <ColorBlock></ColorBlock>\n                </Container>\n                <RightSidebar />\n            </LastProjectsTopWrapper>\n            <LastProjectsWrapper>\n                <Container columns={'1fr'} tabletColumns={'2fr 1fr'}>\n                    <ProjectColumn>\n                        <WorksProjectItem\n                            image={firstWork.previewImage.landscape}\n                            description={firstWork[i18n.language].name}\n                            link={firstWork.parent.name}\n                        />\n                    </ProjectColumn>\n                    <ProjectColumn>\n                        <WorksProjectItem\n                            image={secondWork.previewImage.portrait}\n                            description={secondWork[i18n.language].name}\n                            link={secondWork.parent.name}\n                        />\n                    </ProjectColumn>\n                </Container>\n            </LastProjectsWrapper>\n        </>\n    )\n}\n","import React, { useState, useEffect, useRef } from 'react'\nimport styled, { css } from 'styled-components'\nimport { graphql } from 'gatsby'\nimport Img, { FluidObject } from 'gatsby-image'\nimport { useTranslation } from 'react-i18next'\nimport Slider from 'react-slick'\n\nimport { Connection } from 'blocks/Connection'\nimport { ButtonWithModal } from 'components/ButtonWithModal'\nimport { Container } from 'components/Container'\nimport { backgroundColors, colors } from 'styles/colors'\nimport { headerBg } from 'styles/headerBg'\nimport { mobileAfterBorder } from 'styles/mobileAfterBorder'\nimport { displayWidth } from 'styles/width'\nimport { LastProjects } from '../components/LastProjects'\nimport FullScreen from 'assets/icons/fullScreen.svg'\nimport { ModalCarousel } from 'components/ModalCarousel'\nimport { SlickNext, SlickPrevious } from 'components/SlickNavigation'\nimport { sendEvent } from 'tracking'\nimport { Helmet } from 'react-helmet'\nimport { LocalizedLink } from 'i18n/LocalizedLink'\nimport { Layout } from './Layout'\n\nconst ProjectWrapper = styled.div`\n    display: flex;\n    justify-content: center;\n    width: 100%;\n    background-color: ${backgroundColors.project};\n    position: relative;\n    border-top: 1px solid ${colors.dark};\n    :before {\n        ${headerBg}\n    }\n    ${mobileAfterBorder}\n`\nconst HeroColumn = styled.div`\n    padding: 0px 16px 33px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    flex-shrink: 0;\n    @media (min-width: ${displayWidth.tablet}) {\n        padding: 40px 20px 60px 48px;\n        align-items: flex-start;\n    }\n`\nconst Title = styled.h2`\n    font-family: 'Yeseva One', sans-serif;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 22px;\n    line-height: 26px;\n    text-align: center;\n    letter-spacing: 1.68px;\n    color: ${colors.darkText};\n    margin: 35px 16px 8px;\n    @media (min-width: ${displayWidth.tablet}) {\n        margin: 35px 0px 20px;\n        text-align: left;\n    }\n`\nconst SubTitle = styled.div`\n    font-weight: normal;\n    font-size: 16px;\n    line-height: 26px;\n    text-align: center;\n    letter-spacing: 0.4px;\n    color: ${colors.dark};\n    margin: 16px;\n    p {\n        margin: 10px 0;\n    }\n    @media (min-width: ${displayWidth.tablet}) {\n        text-align: left;\n        margin: 0;\n        margin-bottom: 32px;\n    }\n`\nconst height = css`\n    @media (min-width: ${displayWidth.tablet}) {\n        height: calc((100vw - 160px) * 0.6666);\n    }\n    @media (min-width: ${displayWidth.desktop}) {\n        height: calc((${displayWidth.desktop} - 160px) * 0.5);\n    }\n`\nconst CarouselWrapper = styled.div`\n    position: relative;\n    width: calc(100vw - 32px);\n    height: 150vw;\n    padding: 0 16px;\n    outline: 1px solid ${colors.dark};\n    ${height}\n    @media (min-width: ${displayWidth.tablet}) {\n        width: calc((100vw - 160px) * 0.6666);\n        padding: 0;\n    }\n    @media (min-width: ${displayWidth.desktop}) {\n        width: calc((${displayWidth.desktop} - 160px) * 0.6666);\n    }\n    .slick-list {\n        margin: 0;\n        @media (min-width: ${displayWidth.tablet}) {\n            margin: 0 0px;\n        }\n    }\n    .slick-slider {\n        overflow: hidden;\n        height: 150vw;\n        ${height}\n    }\n    img {\n        cursor: grab;\n        height: 100%;\n    }\n`\n\nconst CarouselWrapperMini = styled(CarouselWrapper)`\n    max-height: 35vw;\n    @media (min-width: ${displayWidth.tablet}) {\n        width: calc((100vw - 160px) * 0.6666);\n        height: calc((100vw - 160px) * 0.6666 * 0.35);\n    }\n    @media (min-width: ${displayWidth.desktop}) {\n        width: calc((${displayWidth.desktop} - 160px) * 0.6666);\n        height: calc((${displayWidth.desktop} - 160px) * 0.6666 / 4);\n    }\n    .slick-list {\n        width: 150%;\n        margin-left: -50%;\n        @media (min-width: ${displayWidth.tablet}) {\n            width: 133.3%;\n            margin-left: -33.3%;\n        }\n    }\n`\n\nconst ImageBig = styled(Img)<{ fluid: FluidObject }>`\n    width: calc(100vw - 32px);\n    height: 150vw;\n    ${height}\n    max-width:100%;\n`\nconst ImageSmall = styled(Img)<{ fluid: FluidObject }>`\n    height: 35vw;\n    overflow: hidden;\n    @media (min-width: ${displayWidth.tablet}) {\n        height: calc((${displayWidth.desktop} - 160px) * 0.6666 / 3);\n    }\n`\n\nconst Breadcrumbs = styled.p`\n    padding: 10px 32px;\n    font-style: normal;\n    font-weight: 600;\n    font-size: 10px;\n    line-height: 14px;\n    letter-spacing: 2px;\n    a {\n        opacity: 0.7;\n        text-decoration: none;\n        color: ${colors.darkText};\n        cursor: pointer;\n    }\n    margin: 0 auto;\n    @media (min-width: ${displayWidth.tablet}) {\n        max-width: calc((100vw - 200px));\n    }\n    @media (min-width: ${displayWidth.desktop}) {\n        width: calc((${displayWidth.desktop} - 256px));\n    }\n`\n\nconst PhotoWrapper = styled.div`\n    ${height}\n`\nconst Counter = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-family: 'Yeseva One', sans-serif;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 30px;\n    line-height: 35px;\n    z-index: 5;\n    width: 111px;\n    height: 65px;\n    position: absolute;\n    bottom: 0px;\n    right: 16px;\n    background-color: ${colors.white};\n    span {\n        opacity: 0.6;\n        font-size: 22px;\n        line-height: 30px;\n        margin-left: 10px;\n    }\n    @media (min-width: ${displayWidth.desktop}) {\n        right: 0px;\n    }\n`\nconst FullScreenButton = styled(FullScreen)`\n    fill: ${colors.white};\n    stroke: ${colors.dark};\n    stroke-width: 1px;\n    position: absolute;\n    top: 10px;\n    right: 26px;\n    width: 40px;\n    height: 40px;\n    cursor: pointer;\n    z-index: 3;\n    @media (min-width: ${displayWidth.desktop}) {\n        right: 10px;\n    }\n`\nconst sliderSettings = {\n    infinite: true,\n    nextArrow: <SlickNext />,\n    prevArrow: <SlickPrevious />,\n    responsive: [\n        {\n            breakpoint: 1024,\n            settings: {\n                arrows: false,\n            },\n        },\n    ],\n}\nconst sliderSettingsBottom = {\n    infinite: true,\n    arrows: false,\n    slidesToShow: 4,\n    focusOnSelect: true,\n    responsive: [\n        {\n            breakpoint: 1024,\n            settings: {\n                slidesToShow: 3,\n            },\n        },\n    ],\n}\n\nexport interface ProjectImages {\n    relativeDirectory: string\n    childImageSharp: {\n        fluid: FluidObject\n        parent: { name: string }\n        id: string\n    }\n}\nexport interface ProjectData {\n    [x: string]: {\n        name: string\n        description: string\n        portrait: string\n        landscape: string\n    }\n}\n\nconst ProjectLayout = ({\n    data,\n}: {\n    data: {\n        allFile: {\n            edges: {\n                node: ProjectImages\n            }[]\n        }\n        allProjectsYaml: {\n            edges: {\n                node: ProjectData\n            }[]\n        }\n        lastProject: {\n            edges: {\n                node: ProjectData\n            }[]\n        }\n    }\n}) => {\n    const { t, i18n } = useTranslation()\n\n    const [nav1, setNav1] = useState<Slider | undefined>()\n    const [nav2, setNav2] = useState<Slider | undefined>()\n    const slider1 = useRef(null)\n    const slider2 = useRef(null)\n\n    useEffect(() => {\n        setNav1(slider1.current!)\n        setNav2(slider2.current!)\n    }, [slider1, slider2])\n\n    const { name, description } = data.allProjectsYaml.edges[0].node[\n        i18n.language\n    ]\n    const projectImages = data.allFile.edges.map(({ node }) => node)\n    const [isModalOpen, setModalIsOpen] = useState(false)\n    const [imageIndex, setImageIndex] = useState(0)\n    return (\n        <Layout>\n            <Helmet>\n                <title>Clearline-{name}</title>\n                <meta name=\"description\" content={description} />\n            </Helmet>\n            <Breadcrumbs>\n                <LocalizedLink to={'/works'}>{t('works')}</LocalizedLink> /\n                {name}\n            </Breadcrumbs>\n            <ProjectWrapper>\n                <Container columns={'1fr'} tabletColumns={'1fr 2fr'}>\n                    <HeroColumn>\n                        <Title>{name}</Title>\n                        <SubTitle\n                            dangerouslySetInnerHTML={{\n                                __html: description,\n                            }}\n                        />\n                    </HeroColumn>\n                    <div>\n                        <CarouselWrapper>\n                            <FullScreenButton\n                                onClick={() => {\n                                    setModalIsOpen(true)\n                                    sendEvent('FullScreen', {\n                                        eventCategory: 'Slider',\n                                        type: name,\n                                    })\n                                }}\n                            />\n                            <Counter>\n                                {imageIndex + 1}\n\n                                <span>/ {projectImages.length}</span>\n                            </Counter>\n                            <Slider\n                                {...sliderSettings}\n                                asNavFor={nav2}\n                                ref={slider1}\n                                afterChange={(current) => {\n                                    setImageIndex(current)\n                                    sendEvent('ShowSlide', {\n                                        eventCategory: 'Slider',\n                                        currentSlide: `${current + 1}`,\n                                        component: name,\n                                    })\n                                }}\n                            >\n                                {projectImages.map((photo) => {\n                                    return (\n                                        <PhotoWrapper\n                                            key={\n                                                photo.childImageSharp.fluid.src\n                                            }\n                                        >\n                                            <ImageBig\n                                                fluid={\n                                                    photo.childImageSharp.fluid\n                                                }\n                                                imgStyle={{\n                                                    objectFit: 'cover',\n                                                }}\n                                                alt={\n                                                    photo.childImageSharp.parent\n                                                        .name\n                                                }\n                                                title={\n                                                    photo.childImageSharp.parent\n                                                        .name\n                                                }\n                                            />\n                                        </PhotoWrapper>\n                                    )\n                                })}\n                            </Slider>\n                        </CarouselWrapper>\n                        <CarouselWrapperMini>\n                            <Slider\n                                {...sliderSettingsBottom}\n                                asNavFor={nav1}\n                                ref={slider2}\n                                afterChange={(current) => {\n                                    sendEvent('ShowSlide', {\n                                        eventCategory: 'Slider',\n                                        currentSlide: `${current + 1}`,\n                                        component: `${name}Mini`,\n                                    })\n                                }}\n                            >\n                                {projectImages.map((photo) => (\n                                    <div key={photo.childImageSharp.fluid.src}>\n                                        <ImageSmall\n                                            fluid={photo.childImageSharp.fluid}\n                                            imgStyle={{\n                                                objectFit: 'cover',\n                                            }}\n                                            alt={\n                                                photo.childImageSharp.parent\n                                                    .name\n                                            }\n                                            title={\n                                                photo.childImageSharp.parent\n                                                    .name\n                                            }\n                                        />\n                                    </div>\n                                ))}\n                            </Slider>\n                        </CarouselWrapperMini>\n                    </div>\n                </Container>\n            </ProjectWrapper>\n            <ModalCarousel\n                data={projectImages}\n                isModalOpen={isModalOpen}\n                closeHandler={() => setModalIsOpen(false)}\n                initialSlideIndex={imageIndex}\n            />\n            <LastProjects data={data.lastProject} />\n            <Connection text={t('connection.needDesignProject')}>\n                <ButtonWithModal\n                    modalTitle={t('connection.modalTitle')}\n                    modalDescription={t('connection.modalDescription')}\n                    buttonLabel={t('connection.buttonLabel')}\n                    placeholder={t('connection.placeholder')}\n                    submitLabel={t('connection.submitLabel')}\n                    tracking={{\n                        conversionType: 'CallbackFromProject',\n                        eventCategory: 'CallbackFromProject',\n                    }}\n                />\n            </Connection>\n        </Layout>\n    )\n}\n\nexport default ProjectLayout\n\nexport const query = graphql`\n    query($imageFolder: String!, $id: String!) {\n        allFile(\n            filter: { relativeDirectory: { eq: $imageFolder } }\n            sort: { fields: name, order: ASC }\n        ) {\n            edges {\n                node {\n                    relativeDirectory\n                    name\n                    childImageSharp {\n                        fluid(srcSetBreakpoints: [400, 1200], quality: 100) {\n                            originalName\n                            ...GatsbyImageSharpFluid\n                        }\n                        parent {\n                            ... on File {\n                                name\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        allProjectsYaml(\n            sort: { fields: name, order: ASC }\n            filter: { parent: { id: { eq: $id } } }\n        ) {\n            edges {\n                node {\n                    name\n                    en {\n                        description\n                        name\n                    }\n                    previewImage {\n                        portrait\n                    }\n                    ru {\n                        description\n                        name\n                    }\n                    uk {\n                        description\n                        name\n                    }\n                    parent {\n                        ... on File {\n                            name\n                        }\n                    }\n                }\n            }\n        }\n        lastProject: allProjectsYaml(\n            sort: { fields: name, order: ASC }\n            filter: { parent: { id: { ne: $id } } }\n        ) {\n            edges {\n                node {\n                    name\n                    en {\n                        description\n                        name\n                    }\n                    previewImage {\n                        portrait\n                        landscape\n                    }\n                    ru {\n                        description\n                        name\n                    }\n                    uk {\n                        description\n                        name\n                    }\n                    parent {\n                        ... on File {\n                            name\n                        }\n                    }\n                }\n            }\n        }\n    }\n`\n","import React, { useEffect, useRef } from 'react'\nimport styled from 'styled-components'\nimport Img, { FluidObject } from 'gatsby-image'\nimport Slider from 'react-slick'\n\nimport { Modal } from './Modal'\nimport { ProjectImages } from 'layout/Project'\nimport { displayWidth } from 'styles/width'\nimport { SlickNext, SlickPrevious } from 'components/SlickNavigation'\n\nconst ImageModal = styled(Img)<{ fluid: FluidObject }>`\n    height: 90vh;\n    @media (min-width: ${displayWidth.desktop}) {\n        height: 100%;\n    }\n`\nconst SliderStyled = styled(Slider)`\n    height: 100%;\n    .slick-list {\n        height: 100%;\n        margin: 0 -10px;\n        @media (min-width: ${displayWidth.tablet}) {\n            margin: 0 -10px;\n        }\n        @media (min-width: ${displayWidth.desktop}) {\n            div {\n                height: 100%;\n            }\n        }\n    }\n    img {\n        cursor: grab;\n    }\n`\n\ninterface IModalProps {\n    closeHandler?: () => void\n    data: ProjectImages[]\n    isModalOpen: boolean\n    initialSlideIndex: number\n}\n\nexport const ModalCarousel: React.FC<IModalProps> = ({\n    data,\n    isModalOpen,\n    closeHandler,\n    initialSlideIndex,\n}) => {\n    const sliderSettings = {\n        infinite: true,\n        nextArrow: <SlickNext modal={true} />,\n        prevArrow: <SlickPrevious modal={true} />,\n        responsive: [\n            {\n                breakpoint: 1024,\n                settings: {\n                    arrows: false,\n                },\n            },\n        ],\n    }\n\n    const slides = data.map((photo) => (\n        <div key={photo.childImageSharp.fluid.src}>\n            <ImageModal\n                fluid={photo.childImageSharp.fluid}\n                imgStyle={{ objectFit: 'contain' }}\n                alt={photo.childImageSharp.parent.name}\n                title={photo.childImageSharp.parent.name}\n            />\n        </div>\n    ))\n    const sliderRef = useRef<Slider | null>(null)\n    const slider = sliderRef.current\n    useEffect(() => {\n        if (slider !== null) {\n            slider.slickGoTo(initialSlideIndex)\n        }\n    }, [initialSlideIndex, slider])\n    return (\n        <Modal isOpen={isModalOpen} closeHandler={closeHandler} image={true}>\n            <SliderStyled ref={sliderRef} {...sliderSettings}>\n                {slides}\n            </SliderStyled>\n        </Modal>\n    )\n}\n"],"sourceRoot":""}